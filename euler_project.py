'''

Project Euler is a series of challenging mathematical/computer programming problems.
For more information please refer:
https://projecteuler.net

'''
from typing import Union
from decorators import time_execution

@time_execution
def multiples_of_3_or_5(x: int = 1000) -> int:
    '''
    Problem 1:
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.

    arguments:
    x -- the length of the search list (default 10001)
    '''
    sum_3_5 = 0
    for i in range(x):
        if i % 3 == 0 or i % 5 == 0:
            sum_3_5 += i
    # another possible solution, but a bit less efficient
    # sum([i for i in range(x) if i % 3 == 0 or i % 5 == 0])
    return sum_3_5

@time_execution
def even_fibonacci_numbers(x: int = 4000000) -> int:
    '''
    Problem 2:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.

    arguments:
    x -- the maximum value of Fibonacci sequence (default 4 000 000)
    '''
    fibonacci_seq = [1, 2]
    while fibonacci_seq[-1] < x:
        fibonacci_seq.append(fibonacci_seq[-1] + fibonacci_seq[-2])
    even_fibonacci_sum = sum([i for _, i in enumerate(fibonacci_seq[:-1]) if _ % 2 == 0])
    return even_fibonacci_sum

# @time_execution
def get_factors(x: int = 600851475143) -> dict:
    '''
    Problem 3:
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the x number?

    arguments:
    x -- the considered number (default 600851475143)
    '''
    dividers = {}
    applicant = 2
    while product(map(lambda kv: kv[0]**kv[1], dividers.items())) != x:
        power = 0
        while (x / product(map(lambda kv: kv[0]**kv[1], dividers.items()))) % applicant == 0:
            power += 1
            dividers[applicant] = power
        applicant += 1
    return dividers

@time_execution
def find_largest_palindrome(x: int = 3) -> int:
    '''
    Problem 4:
    A palindromic number reads the same both ways.
    The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.

    Find the largest palindrome made from the product of two 3-digit numbers.

    arguments:
    x -- the base (default 3)
    '''
    max_base_number = int('9' * x)
    min_base_number = int('1' + '0' * (x - 1))
    palindroms = {}
    for _, i in enumerate(range(max_base_number, min_base_number, -1)):
        for j in range(max_base_number, min_base_number, -1)[_:]:
            if is_palindrom(i * j):
                palindroms[f'{i} * {j}'] = i * j
    return max(palindroms.values())

@time_execution
def smallest_multiple(x: int = 20) -> int:
    '''
    Problem 5:
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 (x)?

    arguments:
    x -- the range of dividers (default 20)
    '''
    i_factors = {}
    for i in range(2, x + 1):
        i_factor = get_factors(i)
        for k, v in i_factor.items():
            if k not in i_factors.keys() or i_factors[k] < v:
                i_factors[k] =  v
    return product(map(lambda kv: kv[0]**kv[1], i_factors.items()))
    ## another possible, but less efficient way :))
    # candidate = 1
    # while not all(list(map(lambda i: candidate % i == 0, list(range(2, x + 1))))):
    #     candidate += 1
    # print(candidate)

@time_execution
def sum_square_difference(x: int = 100) -> int:
    '''
    Problem 6:
    The sum of the squares of the first ten natural numbers is 385,
    The square of the sum of the first ten natural numbers is 3025,
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    Find the difference between the sum of the squares of the first one hundred (x) natural numbers and the square of the sum.

    arguments:
    x -- the range numbers (default 100)
    '''
    sum_squares = sum(map(lambda i: i**2, range(1, x + 1)))
    square_sum = sum(range(1, x + 1)) ** 2
    return square_sum - sum_squares

@time_execution
def x_st_prime_number(x: int = 10001) -> int:
    '''
    Problem 7:
    What is the X-st prime number?

    arguments:
    x -- the length of the search list (default 10001)
    '''
    prime_numbers = []
    number = 2
    while len(prime_numbers) < x:
        if not is_there_div_in_list(number, prime_numbers):
            prime_numbers.append(number)
        number += 1
    return prime_numbers[-1]

@time_execution
def largest_product_in_series(step: int = 13):
    '''
    Problem 8:
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832

    arguments:
    x -- the length of the search list (default 13)
    '''
    matrix = '73167176531330624919225119674426574742355349194934'\
             '96983520312774506326239578318016984801869478851843'\
             '85861560789112949495459501737958331952853208805511'\
             '12540698747158523863050715693290963295227443043557'\
             '66896648950445244523161731856403098711121722383113'\
             '62229893423380308135336276614282806444486645238749'\
             '30358907296290491560440772390713810515859307960866'\
             '70172427121883998797908792274921901699720888093776'\
             '65727333001053367881220235421809751254540594752243'\
             '52584907711670556013604839586446706324415722155397'\
             '53697817977846174064955149290862569321978468622482'\
             '83972241375657056057490261407972968652414535100474'\
             '82166370484403199890008895243450658541227588666881'\
             '16427171479924442928230863465674813919123162824586'\
             '17866458359124566529476545682848912883142607690042'\
             '24219022671055626321111109370544217506941658960408'\
             '07198403850962455444362981230987879927244284909188'\
             '84580156166097919133875499200524063689912560717606'\
             '05886116467109405077541002256983155200055935729725'\
             '71636269561882670428252483600823257530420752963450'

    def get_max_dict_products(dict_products):
        max_value = max(dict_products.values())
        return list(dict_products.keys())[list(dict_products.values()).index(max_value)], max_value

    linear_products = {}
    for i in range(len(matrix) - step):
        linear_products[f'{i} -> {i + step}: {matrix[i:i + step]}'] = product(f'{matrix[i:i + step]}')
    return get_max_dict_products(linear_products)

    # line_width = 50
    # diagonal_products = {}
    # for step_forward in range(len(matrix) - line_width * step - step):
    #     diagonal_lr = ''
    #     indexes = ''
    #     for step_deep in range(step):
    #         index = step_forward + line_width * step_deep + step_deep
    #         diagonal_lr += matrix[index]
    #         indexes += f'_{index}'
    #     diagonal_products[f'{indexes}: {diagonal_lr}'] = product(diagonal_lr)
    # print(get_max_dict_products(diagonal_products))

def is_there_div_in_list(applicant: int, numbers: list) -> bool:
    is_there_div = False
    for number in numbers:
        if applicant % number == 0:
            is_there_div = True
            break
    return is_there_div

def product(list_for_product: Union[str, list[int]]) -> int:
    result = 1
    for item in list_for_product:
        result *= int(item)
    return result

def is_palindrom(candidate: Union[int, str, list]) -> bool:
    palindrom_candidate = str(candidate) if isinstance(candidate, int) else candidate
    id = 0
    is_palindrom = True
    while id < round(len(palindrom_candidate)/2):
        if palindrom_candidate[id] != palindrom_candidate[- id - 1]:
            is_palindrom = False
            break
        id += 1
    return is_palindrom

if __name__ == '__main__':
    print('Problem 1:', multiples_of_3_or_5())
    print('Problem 2:', even_fibonacci_numbers())
    print('Problem 3:', get_factors())
    print('Problem 4:', find_largest_palindrome())
    print('Problem 5:', smallest_multiple())
    print('Problem 6:', sum_square_difference())
    print('Problem 7:', x_st_prime_number())
    print('Problem 8:', largest_product_in_series())